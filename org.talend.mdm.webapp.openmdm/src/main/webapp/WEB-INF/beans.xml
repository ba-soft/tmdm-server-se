<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:hz="http://www.hazelcast.com/schema/spring" xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring.xsd">

    <!-- MDM -->
    <context:property-placeholder location="${mdm.root.url}/conf/mdm.conf" ignore-unresolvable="true" local-override="false"/>
    <import resource="classpath*:META-INF/mdm-context.xml" />

    <!-- CXF Services -->
    <import resource="classpath:META-INF/cxf/cxf.xml" />

    <jaxrs:server id="services" address="/rest">
        <jaxrs:serviceBeans>
            <!-- MDM Transaction service -->
            <bean class="com.amalto.core.storage.transaction.TransactionService" />
            <!-- Staging validation service -->
            <bean class="com.amalto.core.storage.task.staging.StagingTaskService" />
            <!-- Data related services -->
            <bean class="com.amalto.core.storage.services.SystemModels" />
            <bean class="com.amalto.core.storage.services.SystemContainers" />
            <!-- Statistics services -->
            <bean class="com.amalto.core.storage.services.JournalStatistics" />
            <bean class="com.amalto.core.storage.services.DataStatistics" />
            <bean class="com.amalto.core.storage.services.EventStatistics" />
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <bean class="com.amalto.core.storage.task.staging.SerializableListWriter" />
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider" />
        </jaxrs:providers>
    </jaxrs:server>

    <!-- Legacy services -->
    <!-- jaxws:endpoint implementor="com.amalto.core.webservice.XtentisWSBean" address="/soap" /-->
    <jaxws:endpoint implementor="#jaxwsBean" address="/soap">
        <jaxws:inInterceptors>
            <ref bean="wsAuthenticationInterceptor" />
            <ref bean="wsAuthorizationInterceptor" />
        </jaxws:inInterceptors>
    </jaxws:endpoint>
    <bean id="jaxwsBean" class="com.amalto.core.webservice.XtentisWSBean"/>
    <bean id="wsAuthenticationInterceptor" class="com.amalto.core.server.security.ws.WSAuthenticationInterceptor" />
    <bean id="wsAuthorizationInterceptor" class="com.amalto.core.server.security.ws.WSAuthorizationInterceptor">
        <property name="securedObject" ref="jaxwsBean" />
    </bean>

    <!-- JAAS -->
    <bean id="jaasAuthenticationProvider" class="org.springframework.security.authentication.jaas.JaasAuthenticationProvider">
        <property name="loginConfig" value="${mdm.root.url}/conf/jaas.conf" />
        <property name="loginContextName" value="MDM" />
        <property name="callbackHandlers">
            <list>
                <bean class="org.springframework.security.authentication.jaas.JaasNameCallbackHandler" />
                <bean class="org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler" />
            </list>
        </property>
        <property name="authorityGranters">
            <list>
                <bean class="com.amalto.core.server.security.jaas.DefaultAuthorityGranter" />
            </list>
        </property>
    </bean>
        
    <!-- Security configuration -->
    <bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
        <constructor-arg>
            <list>
                <ref bean="jaasAuthenticationProvider" />
            </list>
        </constructor-arg>

        <property name="eraseCredentialsAfterAuthentication" value="false" />
    </bean>

    <security:http auto-config="false" pattern="\A/services.*\Z" create-session="ifRequired" entry-point-ref="basicAuthenticationEntryPoint"
        authentication-manager-ref="authenticationManager" use-expressions="true" request-matcher="regex">
        <security:intercept-url pattern="\A/services/rest\?_wadl" requires-channel="any" access="permitAll"
            method="GET" />
        <security:intercept-url pattern="\A/services/soap\?wsdl" requires-channel="any" access="permitAll"
            method="GET" />
        <security:intercept-url pattern="\A/services" requires-channel="any" access="permitAll" method="GET" />
        <security:intercept-url pattern="\A/services/run.*\Z" requires-channel="any" access="hasAuthority('administration')" />
        <security:intercept-url pattern="\A/services/uploadFile.*\Z" requires-channel="any"
            access="hasAuthority('administration')" />
        <security:intercept-url pattern="\A/services/pubcomponent.*\Z" requires-channel="any" access="permitAll"
            method="GET" />
        <security:intercept-url pattern="\A/services/pubcomponent.*\Z" requires-channel="any"
            access="hasAuthority('administration')" />
        <security:intercept-url pattern="\A/services.*\Z" requires-channel="any" access="hasAuthority('authenticated')" />
        <security:custom-filter position="BASIC_AUTH_FILTER" ref="basicAuthenticationFilter" />
        <security:csrf disabled="true" />
    </security:http>

    <security:http auto-config="false" pattern="/**" entry-point-ref="formLoginAuthenticationEntryPoint"
        authentication-manager-ref="authenticationManager" use-expressions="true">
        <security:intercept-url pattern="/auth/**" requires-channel="any" access="permitAll" />
        <security:intercept-url pattern="/ui" requires-channel="any"
            access="hasAuthority('authenticated') and hasAuthority('UIAuthenticated')" />         
        <security:intercept-url pattern="/api/**" requires-channel="any" access="hasAuthority('administration')" />
        <security:intercept-url pattern="/**" requires-channel="any" access="hasAuthority('authenticated')" />
        <security:custom-filter position="FORM_LOGIN_FILTER" ref="formLoginAuthenticationFilter" />
        <security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencySessionFilter" />
        <security:logout logout-url="/auth/logout" invalidate-session="true" delete-cookies="JSESSIONID" />
        <!-- Disable CSRF protection for now (see http://www.gwtproject.org/doc/latest/DevGuideSecurityRpcXsrf.html) -->
        <security:csrf disabled="true" />
        <security:headers>
            <!-- X-Frame-Options to SAMEORIGIN -->
            <security:frame-options policy="SAMEORIGIN" />
        </security:headers>
        <security:access-denied-handler error-page="/auth/error.jsp?message=error.denied" />
        <security:session-management session-authentication-strategy-ref="sessionAuthenticationStrategy" />
    </security:http>

    <bean id="basicAuthenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <property name="realmName" value="Talend MDM Services Realm" />
    </bean>

    <bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <constructor-arg name="authenticationManager" ref="authenticationManager" />
        <constructor-arg name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint" />
    </bean>

    <bean id="formLoginAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/auth/login.jsp" />
    </bean>

    <bean id="formLoginAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <property name="filterProcessesUrl" value="/auth/j_security_check" />
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="authenticationFailureHandler" ref="formLoginFailureHandler" />
        <property name="authenticationSuccessHandler" ref="formLoginSuccessHandler" />
        <property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
        <property name="usernameParameter" value="j_username" />
        <property name="passwordParameter" value="j_password" />
    </bean>

    <bean id="formLoginSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/ui" />
        <property name="alwaysUseDefaultTargetUrl" value="true" />
    </bean>

    <bean id="formLoginFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="defaultFailureUrl" value="/auth/login.jsp?auth=fail" />
    </bean>

    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

    <bean id="redirectSessionInformationExpiredStrategy" class="org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy">
        <constructor-arg name="invalidSessionUrl" value="/auth/login.jsp" />
    </bean>

    <bean id="concurrencySessionFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <constructor-arg name="sessionInformationExpiredStrategy" ref="redirectSessionInformationExpiredStrategy" />
    </bean>

    <bean id="sessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry" />
                    <property name="maximumSessions" value="1" />
                    <property name="exceptionIfMaximumExceeded" value="false" />
                </bean>
                <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">
                </bean>
                <bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

</beans>
